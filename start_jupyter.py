#!/usr/bin/env python3
"""
Script para iniciar Jupyter Lab con la API de procesamiento de im√°genes
"""

import os
import sys
import subprocess
import webbrowser
import time
from pathlib import Path

def check_jupyter_installation():
    """Verificar si Jupyter est√° instalado"""
    try:
        import jupyter
        print("‚úÖ Jupyter est√° instalado")
        return True
    except ImportError:
        print("‚ùå Jupyter no est√° instalado")
        return False

def install_jupyter():
    """Instalar Jupyter y dependencias necesarias"""
    print("üì¶ Instalando Jupyter y dependencias...")
    
    packages = [
        "jupyter",
        "jupyterlab", 
        "ipywidgets",
        "requests",
        "uvicorn[standard]"
    ]
    
    for package in packages:
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", package], 
                         check=True, capture_output=True)
            print(f"‚úÖ {package} instalado")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Error instalando {package}: {e}")
            return False
    
    return True

def setup_environment():
    """Configurar variables de entorno"""
    print("üîß Configurando entorno...")
    
    # Configurar variables de entorno
    os.environ['HOST'] = '0.0.0.0'
    os.environ['PORT'] = '8080'  # Puerto diferente para evitar conflictos
    os.environ['DEBUG'] = 'True'
    os.environ['UPLOAD_DIR'] = 'temp_uploads'
    os.environ['MAX_FILE_SIZE'] = '10485760'
    os.environ['TESSERACT_PATH'] = '/usr/bin/tesseract'
    os.environ['FAST_MODE'] = 'True'
    
    # Crear directorios necesarios
    Path("temp_uploads").mkdir(exist_ok=True)
    Path("logs").mkdir(exist_ok=True)
    
    print("‚úÖ Entorno configurado")

def config_jupyter_remote():
    """Configurar Jupyter para acceso remoto"""
    print("üåê Configurando Jupyter para acceso remoto...")
    
    try:
        # Generar configuraci√≥n si no existe
        subprocess.run([
            sys.executable, "-m", "jupyter", "lab", "--generate-config"
        ], capture_output=True)
        
        # Obtener ruta del archivo de configuraci√≥n
        home = Path.home()
        config_file = home / ".jupyter" / "jupyter_lab_config.py"
        
        # Configuraci√≥n para acceso remoto
        config_content = """
# Configuraci√≥n para acceso remoto
c.ServerApp.ip = '0.0.0.0'
c.ServerApp.port = 8889
c.ServerApp.open_browser = False
c.ServerApp.allow_root = True
c.ServerApp.token = ''
c.ServerApp.password = ''
c.ServerApp.disable_check_xsrf = True
"""
        
        # Escribir configuraci√≥n
        with open(config_file, 'a') as f:
            f.write(config_content)
        
        print("‚úÖ Jupyter configurado para acceso remoto")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error configurando Jupyter: {e}")
        print("üí° Se usar√° configuraci√≥n por defecto")

def start_jupyter_lab():
    """Iniciar Jupyter Lab"""
    print("üöÄ Iniciando Jupyter Lab...")
    
    try:
        # Configurar Jupyter para acceso remoto
        config_jupyter_remote()
        
        # Iniciar Jupyter Lab
        process = subprocess.Popen([
            sys.executable, "-m", "jupyter", "lab",
            "--ip=0.0.0.0",
            "--port=8889",
            "--no-browser",
            "--allow-root"
        ])
        
        print("‚úÖ Jupyter Lab iniciado")
        print("üåê Accede desde tu m√°quina local a:")
        print("   http://IP_DEL_SERVIDOR:8889")
        print("üìù Abre el notebook: api_jupyter.ipynb")
        print("üõë Presiona Ctrl+C para detener")
        
        # Esperar a que el proceso termine
        process.wait()
        
    except KeyboardInterrupt:
        print("\nüõë Deteniendo Jupyter Lab...")
        process.terminate()
    except Exception as e:
        print(f"‚ùå Error iniciando Jupyter Lab: {e}")

def main():
    """Funci√≥n principal"""
    print("=" * 60)
    print("üöÄ INICIADOR DE JUPYTER PARA API DE PROCESAMIENTO DE IM√ÅGENES")
    print("=" * 60)
    
    # Verificar instalaci√≥n de Jupyter
    if not check_jupyter_installation():
        print("üí° Instalando Jupyter...")
        if not install_jupyter():
            print("‚ùå No se pudo instalar Jupyter")
            sys.exit(1)
    
    # Configurar entorno
    setup_environment()
    
    # Iniciar Jupyter Lab
    start_jupyter_lab()

if __name__ == "__main__":
    main()
